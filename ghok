#!/usr/bin/env bun

// This program is inspired by the Go implementation by @abennett
// https://github.com/abennett/ghok

function statusIcon(status) {
  switch (status) {
    case 'none':
    case 'operational':
      return '✅';

    case 'minor':
    case 'degraded_performance':
      return '⚠️';

    case 'major':
    case 'partial_outage':
      return '🔴';

    case 'critical':
    case 'major_outage':
      return '⛔️';

    default:
      return '❓';
  }
}

function fetchJSON(url) {
  return fetch(url).then((resp) => resp.json());
}

const [componentsResponse, incidentsResponse] = await Promise.all([
  fetchJSON('https://www.githubstatus.com/api/v2/components.json'),
  fetchJSON('https://www.githubstatus.com/api/v2/incidents/unresolved.json'),
]);

console.log(`=== Components as of ${new Date(componentsResponse.page.updated_at).toLocaleString()} ===`);
const components = componentsResponse.components.filter((c) => c.id !== '0l2p9nhqnxpd');
const longestLength = Math.max(...components.map((c) => c.name.length));
components.forEach((c) => {
  console.log(`${c.name}${' '.repeat(longestLength - c.name.length)} ${statusIcon(c.status)}`);
});

const incidents = incidentsResponse.incidents;
if (incidents.length > 0) {
  console.log(`\n=== Incidents ===`);
  incidentsResponse.incidents.forEach((incident) => {
    console.log(`\nName:\t${incident.name}`);
    console.log(`Impact:\t${statusIcon(incident.impact)} ${incident.impact}`);
    console.log(`Status:\t${incident.status}`);
    console.log(`Details:\t${incident.incident_updates[0].body}`);
    console.log(`Link:\t${incident.shortlink}`);
  });
}