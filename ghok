#!/usr/bin/env ruby

# This program is inspired by the Go implementation by @abennett
# https://github.com/abennett/ghok

require "json"
require "net/http"
require "ostruct"
require "time"
require "uri"

def status_icon(status)
  case status
  when "none", "operational"
    "✅"
  when "minor", "degraded_performance"
    "⚠️"
  when "major", "partial_outage"
    "🟠"
  when "critical", "major_outage"
    "⛔️"
  when "under_maintenance"
    "🔧"
  else
    "❓"
  end
end

def get(uri_str)
  JSON.parse(Net::HTTP.get(URI(uri_str)), object_class: OpenStruct)
end

def ftime(time)
  tz = (time.strftime("%z") == "+0000") ? "UTC" : time.strftime("%Z")
  time.strftime("%a, %d %b %Y %H:%M ") + tz
end

components_resp = get("https://www.githubstatus.com/api/v2/components.json")
components = components_resp.components.reject { |c| c.id == "0l2p9nhqnxpd" }
longest_len = components.map(&:name).max_by(&:length).length

puts "=== Components as of #{ftime(DateTime.parse(components_resp.page.updated_at))} ==="
components.each do |component|
  puts "#{component.name.ljust(longest_len)} #{status_icon(component.status)}"
end

incidents_resp = get("https://www.githubstatus.com/api/v2/incidents/unresolved.json")
unless incidents_resp.incidents.empty?
  print "\n=== Incidents ==="
  incidents_response.incidents.each do |incident|
    puts "\nName:\t#{incident.name}"
    puts "Impact:\t#{status_icon(incident.impact)} #{incident.impact}"
    puts "Status:\t#{incident.status}"
    puts "Details:\t#{incident.incident_updates.first.body}"
    puts "Link:\t#{incident.shortlink}"
  end
end
